{% extends "base.jinja2" %}

{% block content %}
<div style="text-align: center; margin-bottom: 30px;">
    <h1 style="font-size: 2.5rem; margin-bottom: 20px;">📊 Real-Time Market Leaders</h1>
    <p style="font-size: 1.3rem; margin-bottom: 20px;">Watch the comedy coin race unfold in real-time!</p>
    {% if current_username %}
    <div style="background: linear-gradient(45deg, #9b59b6, #8e44ad); padding: 15px; border-radius: 10px; margin: 20px auto; max-width: 400px;">
        <h3 style="margin: 0;">🏁 Your Position: <span id="userPosition">Calculating...</span></h3>
        <p style="font-size: 1.2rem; font-weight: bold; margin: 10px 0;">{{ "{:,}".format(current_user_balance) }} Straw Coins</p>
    </div>

    <!-- Navigation Links -->
    <div style="margin: 20px 0;">
        <a href="/" style="background: linear-gradient(45deg, #2ecc71, #27ae60); color: white; text-decoration: none; padding: 12px 25px; border-radius: 25px; font-weight: bold; margin: 0 10px; display: inline-block; transition: transform 0.2s;">
            🏠 Back to Home
        </a>
    </div>
    {% endif %}
</div>

<!-- Chart Controls -->
<div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 15px; margin-bottom: 30px;">
    <div style="display: flex; justify-content: center; align-items: center; gap: 20px; flex-wrap: wrap;">
        <div>
            <label style="font-weight: bold; margin-right: 10px;">Time Range:</label>
            <select id="timeRangeSelect" style="padding: 8px; border-radius: 5px; border: none; background: rgba(255,255,255,0.9); color: #333;">
                <option value="0.5" selected>Last 30 minutes</option>
                <option value="1">Last hour</option>
                <option value="1.5">Last 90 minutes</option>
                <option value="2">Last 2 hours</option>
                <option value="3">Last 3 hours</option>
            </select>
        </div>

        <button id="refreshBtn" style="background: linear-gradient(45deg, #3498db, #2980b9); color: white; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold; cursor: pointer;">
            🔄 Refresh Data
        </button>

        <div id="lastUpdate" style="font-size: 0.9rem; opacity: 0.8;">
            Last updated: <span id="updateTime">--</span>
        </div>
    </div>
</div>

<!-- Chart Container -->
<div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <div style="position: relative; height: 500px;">
        <canvas id="leaderboardChart"></canvas>
    </div>
    <div id="chartStatus" style="text-align: center; margin-top: 15px; font-style: italic; opacity: 0.8;">
        Loading chart data...
    </div>
</div>

<!-- Current Leaderboard -->
<div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <h2 style="text-align: center; margin-bottom: 20px;">🏆 Current Rankings</h2>
    <div id="currentLeaderboard" style="display: grid; gap: 10px;">
        <!-- Will be populated by JavaScript -->
    </div>
</div>

<!-- Racing Stats -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px;">
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>🚀 Biggest Gainer</h3>
        <div id="biggestGainer">
            <p style="font-size: 1.5rem; font-weight: bold;">--</p>
            <p style="color: #2ecc71;">+-- coins</p>
        </div>
    </div>
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>📉 Biggest Loser</h3>
        <div id="biggestLoser">
            <p style="font-size: 1.5rem; font-weight: bold;">--</p>
            <p style="color: #e74c3c;">--- coins</p>
        </div>
    </div>
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>⚡ Most Active</h3>
        <div id="mostActive">
            <p style="font-size: 1.5rem; font-weight: bold;">--</p>
            <p>-- transactions</p>
        </div>
    </div>
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>📊 Data Points</h3>
        <div id="dataStats">
            <p style="font-size: 1.5rem; font-weight: bold;" id="totalDataPoints">--</p>
            <p>Balance updates tracked</p>
        </div>
    </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.1/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<script>
let chart;
let updateInterval;
const currentUsername = '{{ current_username }}';

document.addEventListener('DOMContentLoaded', function() {
    initializeChart();
    startAutoUpdate();

    // Event listeners
    document.getElementById('timeRangeSelect').addEventListener('change', function() {
        loadChartData();
    });

    document.getElementById('refreshBtn').addEventListener('click', function() {
        loadChartData();
    });
});

function initializeChart() {
    const ctx = document.getElementById('leaderboardChart').getContext('2d');

    chart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: []
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: 'Straw Coin Leaderboard Race',
                    color: '#ffffff',
                    font: {
                        size: 18,
                        weight: 'bold'
                    }
                },
                legend: {
                    labels: {
                        color: '#ffffff',
                        usePointStyle: true
                    }
                }
            },
            scales: {
                x: {
                    type: 'time',
                    time: {
                        displayFormats: {
                            minute: 'HH:mm',
                            hour: 'HH:mm'
                        }
                    },
                    grid: {
                        color: 'rgba(255,255,255,0.1)'
                    },
                    ticks: {
                        color: '#ffffff'
                    },
                    title: {
                        display: true,
                        text: 'Time',
                        color: '#ffffff'
                    }
                },
                y: {
                    grid: {
                        color: 'rgba(255,255,255,0.1)'
                    },
                    ticks: {
                        color: '#ffffff',
                        callback: function(value) {
                            return value.toLocaleString() + ' coins';
                        }
                    },
                    title: {
                        display: true,
                        text: 'Straw Coins',
                        color: '#ffffff'
                    }
                }
            },
            interaction: {
                intersect: false,
                mode: 'index'
            },
            animation: {
                duration: 1000,
                easing: 'easeInOutQuart'
            }
        }
    });

    loadChartData();
}

async function loadChartData() {
    const timeRange = document.getElementById('timeRangeSelect').value;
    const statusDiv = document.getElementById('chartStatus');
    const refreshBtn = document.getElementById('refreshBtn');

    try {
        statusDiv.textContent = 'Loading latest market data...';
        refreshBtn.textContent = '🔄 Loading...';
        refreshBtn.disabled = true;

        const response = await fetch(`/api/leaderboard-history?hours=${timeRange}`);
        const data = await response.json();

        if (data.status === 'success') {
            // Update chart
            chart.data.datasets = data.datasets;
            chart.update('active');

            // Update current leaderboard
            updateCurrentLeaderboard(data.current_leaders);

            // Update stats
            updateRacingStats(data);

            // Update user position
            updateUserPosition(data.current_leaders);

            statusDiv.textContent = `Showing ${data.datasets.length} traders over ${timeRange} hours`;
            document.getElementById('totalDataPoints').textContent = data.total_data_points;
            document.getElementById('updateTime').textContent = new Date().toLocaleTimeString();
        } else {
            statusDiv.textContent = 'Error loading chart data';
        }
    } catch (error) {
        console.error('Chart data error:', error);
        statusDiv.textContent = 'Network error - retrying...';
    } finally {
        refreshBtn.textContent = '🔄 Refresh Data';
        refreshBtn.disabled = false;
    }
}

function updateCurrentLeaderboard(leaders) {
    const container = document.getElementById('currentLeaderboard');
    const medals = ['🥇', '🥈', '🥉'];

    container.innerHTML = '';

    leaders.slice(0, 10).forEach((leader, index) => {
        const div = document.createElement('div');
        div.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 8px;
            ${leader.username === currentUsername ? 'border: 2px solid #f39c12;' : ''}
        `;

        const medal = index < 3 ? medals[index] : `#${index + 1}`;
        const changeIndicator = ''; // We could add change indicators here

        div.innerHTML = `
            <span style="font-weight: bold;">
                ${medal} ${leader.username} ${changeIndicator}
            </span>
            <span style="font-weight: bold; font-size: 1.1rem;">
                ${leader.coin_balance.toLocaleString()} coins
            </span>
        `;

        container.appendChild(div);
    });
}

function updateUserPosition(leaders) {
    const userPosition = leaders.findIndex(leader => leader.username === currentUsername) + 1;
    const positionElement = document.getElementById('userPosition');

    if (userPosition > 0) {
        let positionText = `#${userPosition}`;
        if (userPosition === 1) positionText += ' 🥇';
        else if (userPosition === 2) positionText += ' 🥈';
        else if (userPosition === 3) positionText += ' 🥉';

        positionElement.textContent = positionText;
    } else {
        positionElement.textContent = 'Unranked';
    }
}

function updateRacingStats(data) {
    // Calculate biggest gainer/loser from chart data
    let biggestGain = 0;
    let biggestLoss = 0;
    let biggestGainer = '--';
    let biggestLoser = '--';

    data.datasets.forEach(dataset => {
        if (dataset.data.length >= 2) {
            const first = dataset.data[0].y;
            const last = dataset.data[dataset.data.length - 1].y;
            const change = last - first;

            if (change > biggestGain) {
                biggestGain = change;
                biggestGainer = dataset.label;
            }
            if (change < biggestLoss) {
                biggestLoss = change;
                biggestLoser = dataset.label;
            }
        }
    });

    // Update UI
    document.getElementById('biggestGainer').innerHTML = `
        <p style="font-size: 1.5rem; font-weight: bold;">${biggestGainer}</p>
        <p style="color: #2ecc71;">+${biggestGain.toLocaleString()} coins</p>
    `;

    document.getElementById('biggestLoser').innerHTML = `
        <p style="font-size: 1.5rem; font-weight: bold;">${biggestLoser}</p>
        <p style="color: #e74c3c;">${biggestLoss.toLocaleString()} coins</p>
    `;

    // Most active (placeholder - would need transaction data)
    document.getElementById('mostActive').innerHTML = `
        <p style="font-size: 1.5rem; font-weight: bold;">--</p>
        <p>Feature coming soon</p>
    `;
}

function startAutoUpdate() {
    // Update every 30 seconds
    updateInterval = setInterval(() => {
        loadChartData();
    }, 30000);
}

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    if (updateInterval) {
        clearInterval(updateInterval);
    }
});

// Add some visual effects
document.querySelectorAll('button').forEach(button => {
    button.addEventListener('mouseenter', function() {
        if (!this.disabled) {
            this.style.transform = 'scale(1.05)';
        }
    });

    button.addEventListener('mouseleave', function() {
        this.style.transform = 'scale(1)';
    });
});
</script>
{% endblock %}
