<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title or "Straw Coin - Revolutionary Comedy Tokenization" }}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            padding: 40px 0;
            background: rgba(0, 0, 0, 0.2);
            margin-bottom: 40px;
        }

        .logo {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .tagline {
            font-size: 1.2rem;
            opacity: 0.9;
            font-style: italic;
        }

        .main-content {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 40px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .crypto-badge {
            display: inline-block;
            background: linear-gradient(45deg, #f39c12, #e67e22);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            margin: 5px;
            text-transform: uppercase;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            opacity: 0.7;
        }

        .emoji {
            font-size: 1.5rem;
        }

        @media (max-width: 768px) {
            .logo {
                font-size: 2rem;
            }
            
            .main-content {
                padding: 20px;
            }
        }
    </style>
</head>
<body class="{{ page_class or '' }}">
    <div class="container">
        <header>
            <div class="logo">🪙 {{ site_name or "Straw Coin" }} 🚀</div>
            <div class="tagline">{{ tagline or "Revolutionary Comedy Market Dynamics" }}</div>
        </header>

        <main class="main-content">
            {% block content %}
            {{ content|safe }}
            {% endblock %}
        </main>

        <footer class="footer">
            <div>
                <span class="crypto-badge">To The Moon! 🌙</span>
                <span class="crypto-badge">Diamond Hands 💎</span>
                <span class="crypto-badge">HODL 🔥</span>
            </div>
            <p>Powered by Revolutionary Blockchain-Adjacent Technology</p>
            <p><em>"Where Market Cap Meets Comedy Cap"</em></p>
        </footer>
    </div>

    <!-- Mobile-Optimized Session Management for The Short Straw Trading Platform -->
    <script>
    (function() {
        let sessionCheckInterval;
        let activityEvents = ['touchstart', 'touchmove', 'touchend', 'scroll', 'click', 'keypress'];
        let isActive = true;
        
        // Mobile-specific session monitoring
        function initSessionTracking() {
            // Check if user is authenticated
            fetch('/session-status')
                .then(response => {
                    if (response.status === 401) {
                        // Not authenticated - redirect to registration
                        if (window.location.pathname !== '/register' && 
                            window.location.pathname !== '/session-expired') {
                            window.location.href = '/register';
                        }
                        return;
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.authenticated) {
                        startSessionMonitoring();
                        setupActivityTracking();
                    }
                })
                .catch(error => {
                    console.error('Session check failed:', error);
                });
        }

        function startSessionMonitoring() {
            // Check session status every 5 seconds for mobile optimization (frequent in debug mode)
            sessionCheckInterval = setInterval(() => {
                fetch('/session-status')
                    .then(response => {
                        if (response.status === 401) {
                            clearInterval(sessionCheckInterval);
                            window.location.href = '/session-expired';
                            return null;
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data && data.time_remaining_seconds <= 10) {
                            // Show warning for last 10 seconds (works for both debug and production)
                            showSessionWarning(data.time_remaining_seconds);
                        }
                        if (data && data.time_remaining_seconds <= 0) {
                            // Force logout if time is up
                            clearInterval(sessionCheckInterval);
                            window.location.href = '/session-expired';
                        }
                    })
                    .catch(error => {
                        console.error('Session monitoring error:', error);
                    });
            }, 5000);
        }

        function setupActivityTracking() {
            // Track mobile-specific events to maintain session
            activityEvents.forEach(event => {
                document.addEventListener(event, handleActivity, { passive: true });
            });

            // Mobile-specific: track page visibility changes
            document.addEventListener('visibilitychange', () => {
                if (!document.hidden) {
                    handleActivity();
                }
            });

            // Handle mobile app state changes
            window.addEventListener('focus', handleActivity);
            window.addEventListener('pageshow', handleActivity);
        }

        function handleActivity() {
            if (!isActive) return;
            
            // Throttle activity updates for mobile performance
            isActive = false;
            setTimeout(() => { isActive = true; }, 1000);

            // Update session activity using dedicated endpoint
            fetch('/update-activity', { 
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (response.status === 401) {
                        window.location.href = '/session-expired';
                    }
                })
                .catch(error => {
                    console.error('Activity update failed:', error);
                });
        }

        function showSessionWarning(seconds) {
            // Mobile-friendly session warning
            let existingWarning = document.getElementById('session-warning');
            if (existingWarning) return;

            let warning = document.createElement('div');
            warning.id = 'session-warning';
            warning.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(255, 193, 7, 0.95);
                color: #000;
                padding: 15px 25px;
                border-radius: 10px;
                font-weight: bold;
                z-index: 9999;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                font-size: 14px;
                text-align: center;
                max-width: 90vw;
            `;
            warning.innerHTML = `⚠️ Session expires in ${seconds}s - Tap to extend!`;
            
            warning.addEventListener('click', () => {
                handleActivity();
                warning.remove();
            });

            warning.addEventListener('touchstart', () => {
                handleActivity();
                warning.remove();
            });

            document.body.appendChild(warning);

            setTimeout(() => {
                if (warning.parentNode) {
                    warning.remove();
                }
            }, 5000);
        }

        // Initialize session tracking when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initSessionTracking);
        } else {
            initSessionTracking();
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (sessionCheckInterval) {
                clearInterval(sessionCheckInterval);
            }
        });
    })();
    </script>
</body>
</html>