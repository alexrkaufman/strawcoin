{% import "macros.jinja2" as m %}
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{{ title or "Straw Coin - Revolutionary Comedy Tokenization" }}</title>
        <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    </head>
    <body class="{{ page_class or '' }}">
        <div class="container">
            <header>
                <div class="logo">ü™ô {{ site_name or "Straw Coin" }} üöÄ</div>
                <div class="tagline">{{ tagline or "Revolutionary Comedy Market Dynamics" }}</div>
            </header>
            <!-- Unified Session Banner -->
            <div id="session-banner" class="session-banner session-inactive">
                <div class="session-banner-content">
                    <span id="session-icon" class="session-icon">‚è∞</span>
                    <span id="session-text" class="session-text">No session active</span>
                    <button id="extend-session" class="extend-session-btn" style="display: none;">Extend Session</button>
                    <span id="session-message" class="session-message" style="display: none;">‚úì Extended!</span>
                </div>
            </div>
            <main class="main-content">
                {% block content %}{{ content|safe }}{% endblock %}
            </main>
            <footer class="footer">
                <div>
                    <span class="crypto-badge">To The Moon! üåô</span>
                    <span class="crypto-badge">Diamond Hands üíé</span>
                    <span class="crypto-badge">HODL üî•</span>
                </div>
                <p>Powered by Revolutionary Blockchain-Adjacent Technology</p>
                <p>
                    <em>"Where Market Cap Meets Comedy Cap"</em>
                </p>
            </footer>
        </div>
        {% if request.endpoint != 'auth.session_expired' and request.endpoint != 'auth.register' %}
            <script src="{{ url_for('static', filename='js/session.js') }}"></script>
            <script>
        // Simple session timeout - minimal and working
        let sessionTimer = null;
        let sessionActive = false;
        let timeoutSeconds = {{ config.SESSION_TIMEOUT_SECONDS }};
        let timeRemaining = 0;
        let countdownInterval = null;

        console.log('Session timeout set to:', timeoutSeconds, 'seconds');

        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is authenticated
            fetch('/session-status')
                .then(response => response.json())
                .then(data => {
                    if (data.authenticated) {
                        console.log('User authenticated - starting session timer');
                        startSessionTimer();
                    } else {
                        updateBanner('No session active', 'session-inactive');
                    }
                })
                .catch(error => {
                    console.error('Error checking session:', error);
                    updateBanner('No session active', 'session-inactive');
                });

            // Set up extend button
            const extendButton = document.getElementById('extend-session');
            if (extendButton) {
                extendButton.addEventListener('click', function() {
                    console.log('Extend button clicked - restarting timer');
                    startSessionTimer();
                });
            }
        });

        function startSessionTimer() {
            sessionActive = true;
            timeRemaining = timeoutSeconds;

            // Clear existing timers
            if (sessionTimer) {
                clearTimeout(sessionTimer);
            }
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }

            console.log('Starting session timer for', timeoutSeconds, 'seconds');

            // Start countdown display
            countdownInterval = setInterval(function() {
                timeRemaining--;
                updateBannerWithCountdown();

                if (timeRemaining <= 0) {
                    clearInterval(countdownInterval);
                }
            }, 1000);

            // Set timeout for session expiration
            sessionTimer = setTimeout(function() {
                console.log('Session timer expired - redirecting to session expired page');
                sessionActive = false;

                // Logout from server and redirect
                fetch('/logout', { method: 'POST' })
                    .catch(() => {}) // Ignore errors
                    .finally(() => {
                        window.location.href = '/session-expired';
                    });
            }, timeoutSeconds * 1000);

            // Initial banner update
            updateBannerWithCountdown();
        }

        function updateBanner(text, cssClass) {
            const banner = document.getElementById('session-banner');
            const sessionText = document.getElementById('session-text');
            const extendButton = document.getElementById('extend-session');

            if (sessionText) {
                sessionText.textContent = text;
            }

            if (banner) {
                banner.className = 'session-banner ' + cssClass;
            }

            if (extendButton) {
                extendButton.style.display = sessionActive ? 'inline' : 'none';
            }
        }

        function updateBannerWithCountdown() {
            if (!sessionActive) return;

            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const timeText = `${minutes}:${seconds.toString().padStart(2, '0')}`;

            let cssClass = 'session-active';
            let displayText = `Session expires in ${timeText}`;

            // Change colors based on time remaining
            if (timeRemaining <= 10) {
                cssClass = 'session-critical';
            } else if (timeRemaining <= 30) {
                cssClass = 'session-warning';
            }

            updateBanner(displayText, cssClass);
        }

        // Track user activity to restart timer
        const activityEvents = ['click', 'scroll', 'mousemove', 'keydown', 'touchstart', 'touchactivity'];
        activityEvents.forEach(event => {
            document.addEventListener(event, function() {
                if (sessionActive) {
                    console.log('User activity detected - restarting timer');
                    startSessionTimer();
                }
            }, { passive: true });
        });

        // Clean up on page unload
        window.addEventListener('beforeunload', function() {
            if (sessionTimer) {
                clearTimeout(sessionTimer);
            }
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
        });
            </script>
        {% else %}
            <script>
        // Minimal script for excluded pages - no session monitoring
        document.addEventListener('DOMContentLoaded', function() {
            const sessionBanner = document.getElementById('session-banner');
            if (sessionBanner) {
                sessionBanner.style.display = 'none';
            }
        });
            </script>
        {% endif %}
    </body>
</html>
