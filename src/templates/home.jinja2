{% extends "base.jinja2" %}

{% block content %}
<div style="text-align: center; margin-bottom: 40px;">
    <h1 style="font-size: 2.5rem; margin-bottom: 20px;">🚀 Welcome to The Revolution 🚀</h1>
    <p style="font-size: 1.3rem; margin-bottom: 30px;">Disrupting <strong>The Short Straw</strong> through cutting-edge comedy tokenization</p>
    {% if current_username %}
    <div style="background: linear-gradient(45deg, #2ecc71, #27ae60); padding: 15px; border-radius: 10px; margin: 20px auto; max-width: 400px;">
        <h3 style="margin: 0;">💰 Welcome back, {{ current_username }}!</h3>
        <p style="font-size: 1.5rem; font-weight: bold; margin: 10px 0;">{{ "{:,}".format(current_user_balance) }} Straw Coins</p>
    </div>

    <!-- Navigation Links -->
    <div style="margin: 20px 0;">
        <a href="/leaderboard" style="background: linear-gradient(45deg, #9b59b6, #8e44ad); color: white; text-decoration: none; padding: 12px 25px; border-radius: 25px; font-weight: bold; margin: 0 10px; display: inline-block; transition: transform 0.2s;">
            📊 Real-Time Leaderboard
        </a>
    </div>
    {% endif %}
</div>

{% if current_username %}
<!-- Send Coins Feature -->
<div style="background: rgba(255,255,255,0.15); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <h2 style="text-align: center; margin-bottom: 25px;">💸 Send Coins to Fellow Shareholders</h2>
    <!-- Quick Send Buttons -->
    <div style="text-align: center; margin: 25px 0px;">
        <p style="margin-bottom: 15px; opacity: 0.9;">Quick Send:</p>
        <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
            <button class="quickSend" data-amount="100" style="background: rgba(255,255,255,0.2); border: none; padding: 10px 15px; border-radius: 20px; color: white; cursor: pointer;">100 coins</button>
            <button class="quickSend" data-amount="500" style="background: rgba(255,255,255,0.2); border: none; padding: 10px 15px; border-radius: 20px; color: white; cursor: pointer;">500 coins</button>
            <button class="quickSend" data-amount="1000" style="background: rgba(255,255,255,0.2); border: none; padding: 10px 15px; border-radius: 20px; color: white; cursor: pointer;">1,000 coins</button>
        </div>
    </div>

    <div style="max-width: 500px; margin: 0 auto;">
        <form id="sendCoinsForm" style="display: grid; gap: 20px;">
            <div>
                <label style="display: block; margin-bottom: 8px; font-weight: bold;">Recipient:</label>
                <select id="recipient" name="recipient" style="width: 100%; padding: 12px; border-radius: 8px; border: none; font-size: 16px; background: rgba(255,255,255,0.9); color: #333;" required>
                    <option value="">Select a shareholder...</option>
                    {% for user in available_recipients %}
                    <option value="{{ user.username }}">{{ user.username }}</option>
                    {% endfor %}
                </select>
            </div>

            <div>
                <label style="display: block; margin-bottom: 8px; font-weight: bold;">Amount:</label>
                <input type="number" id="amount" name="amount" min="1" max="{{ current_user_balance }}"
                       style="width: 100%; padding: 12px; border-radius: 8px; border: none; font-size: 16px; background: rgba(255,255,255,0.9); color: #333;"
                       placeholder="Enter amount..." required>
                <small style="opacity: 0.8;">Maximum: {{ "{:,}".format(current_user_balance) }} coins</small>
            </div>

            <button type="submit" style="background: linear-gradient(45deg, #f39c12, #e67e22); color: white; border: none; padding: 15px; border-radius: 8px; font-size: 18px; font-weight: bold; cursor: pointer; transition: transform 0.2s;">
                🚀 Send Coins
            </button>
        </form>

        <div id="transferStatus" style="margin-top: 20px; padding: 15px; border-radius: 8px; display: none;"></div>
    </div>

</div>

<!-- Recent Transactions -->
{% if recent_transactions %}
<div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <h2 style="text-align: center; margin-bottom: 20px;">📈 Your Recent Transactions</h2>
    <div style="display: grid; gap: 10px;">
        {% for transaction in recent_transactions %}
        <div style="display: flex; justify-content: space-between; align-items: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
            <div>
                {% if transaction.sender == current_username %}
                <span style="color: #e74c3c;">📤 Sent to {{ transaction.recipient }}</span>
                {% else %}
                <span style="color: #2ecc71;">📥 Received from {{ transaction.sender }}</span>
                {% endif %}
                <div style="font-size: 0.9rem; opacity: 0.8;">{{ transaction.timestamp.strftime('%Y-%m-%d %H:%M') }}</div>
            </div>
            <span style="font-weight: bold; font-size: 1.1rem;">
                {% if transaction.sender == current_username %}
                <span style="color: #e74c3c;">-{{ "{:,}".format(transaction.amount) }}</span>
                {% else %}
                <span style="color: #2ecc71;">+{{ "{:,}".format(transaction.amount) }}</span>
                {% endif %}
            </span>
        </div>
        {% endfor %}
    </div>
</div>
{% endif %}
{% endif %}

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 40px;">
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>💰 Market Cap</h3>
        <p style="font-size: 2rem; font-weight: bold;">{{ "{:,}".format(market_cap) }}</p>
        <p>Straw Coins in Circulation</p>
    </div>
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>👥 Active Stakeholders</h3>
        <p style="font-size: 2rem; font-weight: bold;">{{ stakeholder_count }}</p>
        <p>Market Participants</p>
    </div>
    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
        <h3>📊 Trading Volume</h3>
        <p style="font-size: 2rem; font-weight: bold;">{{ "{:,}".format(volume) }}</p>
        <p>Total Coins Transferred</p>
    </div>
</div>

<!-- Performer System Status -->
<div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <h2 style="text-align: center; margin-bottom: 20px;">🎭 Performer Economy</h2>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px;">
        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
            <h3>🎪 Performers</h3>
            <p style="font-size: 2rem; font-weight: bold;">{{ performer_count }}</p>
            <p>Active on Stage</p>
        </div>
        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center;">
            <h3>👥 Audience</h3>
            <p style="font-size: 2rem; font-weight: bold;">{{ audience_count }}</p>
            <p>Market Participants</p>
        </div>
    </div>
    
    {% if current_user_is_performer %}
    <div style="background: linear-gradient(45deg, #e74c3c, #c0392b); padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 20px;">
        <h3 style="margin: 0 0 10px 0;">🎭 You are a PERFORMER</h3>
        <p style="margin: 5px 0; opacity: 0.9;">You lose 5 coins every minute to audience members</p>
        <p style="margin: 5px 0; font-size: 0.9rem; opacity: 0.7;">Make them laugh to earn coins back through tips!</p>
    </div>
    {% else %}
    <div style="background: linear-gradient(45deg, #2ecc71, #27ae60); padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 20px;">
        <h3 style="margin: 0 0 10px 0;">👥 You are AUDIENCE</h3>
        <p style="margin: 5px 0; opacity: 0.9;">You receive coins from performers every minute</p>
        <p style="margin: 5px 0; font-size: 0.9rem; opacity: 0.7;">Send coins to performers to show appreciation!</p>
    </div>
    {% endif %}
    
    {% if redistribution_enabled %}
    <div style="text-align: center; background: rgba(255,255,255,0.05); padding: 15px; border-radius: 8px;">
        <p style="margin: 0; font-size: 0.9rem; opacity: 0.8;">
            ⏰ Automatic redistribution every minute | 
            💰 5 coins per performer → audience members
        </p>
    </div>
    {% endif %}
</div>

<div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; margin-bottom: 30px;">
    <h2 style="text-align: center; margin-bottom: 20px;">🏆 Market Leaders</h2>
    <div style="display: grid; gap: 10px;">
        {% if top_performers %}
            {% for performer in top_performers %}
                {% set medals = ["🥇", "🥈", "🥉"] %}
                <div style="display: flex; justify-content: space-between; align-items: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <span>{{ medals[loop.index0] }} {{ performer.username }}</span>
                    <span style="font-weight: bold;">{{ "{:,}".format(performer.coin_balance) }} Straw Coins</span>
                </div>
            {% endfor %}
        {% else %}
            <p style='text-align: center; opacity: 0.7;'>No stakeholders yet - Be the first to join the revolution!</p>
        {% endif %}
    </div>
</div>

<div style="text-align: center; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px;">
    {% if not current_username %}
    <h2 style="margin-bottom: 20px;">🌙 Join The Moon Mission</h2>
    <p style="margin-bottom: 20px; font-size: 1.1rem;">Ready to disrupt comedy through market forces?</p>
    <p style="margin-bottom: 15px;">🎯 <strong>Get 10,000 Straw Coins</strong> instantly upon registration</p>
    <p style="margin-bottom: 15px;">💸 <strong>Trade with other audience members</strong> during The Short Straw</p>
    <p style="margin-bottom: 25px;">📈 <strong>Let the market decide</strong> comedic value - no taste required!</p>
    {% else %}
    <h2 style="margin-bottom: 20px;">🎭 The Comedy Market is Live!</h2>
    <p style="margin-bottom: 20px; font-size: 1.1rem;">Trade coins with fellow audience members and influence the show!</p>
    <p style="margin-bottom: 15px;">💸 <strong>Send coins</strong> to show support for your favorite comedians</p>
    <p style="margin-bottom: 15px;">📊 <strong>Track your portfolio</strong> and climb the leaderboard</p>
    <p style="margin-bottom: 25px;">🏆 <strong>Become a comedy market leader</strong> through strategic trading!</p>
    {% endif %}
</div>

<script>
// Send Coins Functionality
document.addEventListener('DOMContentLoaded', function() {
    const sendForm = document.getElementById('sendCoinsForm');
    const quickSendButtons = document.querySelectorAll('.quickSend');
    const statusDiv = document.getElementById('transferStatus');
    const amountInput = document.getElementById('amount');
    const recipientSelect = document.getElementById('recipient');

    // Quick send button functionality
    quickSendButtons.forEach(button => {
        button.addEventListener('click', function() {
            const amount = this.getAttribute('data-amount');
            amountInput.value = amount;

            // Highlight the selected amount
            quickSendButtons.forEach(btn => btn.style.background = 'rgba(255,255,255,0.2)');
            this.style.background = 'rgba(255,255,255,0.4)';
        });
    });

    // Form submission
    if (sendForm) {
        sendForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const recipient = recipientSelect.value;
            const amount = parseInt(amountInput.value);

            if (!recipient || !amount || amount <= 0) {
                showStatus('Please select a recipient and enter a valid amount', 'error');
                return;
            }

            const currentBalance = {{ current_user_balance }};
            if (amount > currentBalance) {
                showStatus('Insufficient funds! You only have ' + currentBalance.toLocaleString() + ' coins', 'error');
                return;
            }

            try {
                // Disable form during request
                const submitButton = sendForm.querySelector('button[type="submit"]');
                const originalText = submitButton.textContent;
                submitButton.textContent = '🚀 Sending...';
                submitButton.disabled = true;

                const response = await fetch('/api/transfer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sender: '{{ current_username }}',
                        recipient: recipient,
                        amount: amount
                    })
                });

                const data = await response.json();

                if (response.ok && data.status === 'success') {
                    showStatus(`🎉 Successfully sent ${amount.toLocaleString()} coins to ${recipient}!`, 'success');

                    // Reset form
                    sendForm.reset();
                    quickSendButtons.forEach(btn => btn.style.background = 'rgba(255,255,255,0.2)');

                    // Refresh page after a short delay to update balances
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showStatus(`Error: ${data.message || 'Transfer failed'}`, 'error');
                }

                // Re-enable form
                submitButton.textContent = originalText;
                submitButton.disabled = false;

            } catch (error) {
                showStatus('Network error. Please try again.', 'error');
                console.error('Transfer error:', error);

                // Re-enable form
                const submitButton = sendForm.querySelector('button[type="submit"]');
                submitButton.textContent = '🚀 Send Coins';
                submitButton.disabled = false;
            }
        });
    }

    function showStatus(message, type) {
        statusDiv.style.display = 'block';
        statusDiv.innerHTML = message;

        if (type === 'success') {
            statusDiv.style.background = 'rgba(46, 204, 113, 0.9)';
            statusDiv.style.color = 'white';
        } else {
            statusDiv.style.background = 'rgba(231, 76, 60, 0.9)';
            statusDiv.style.color = 'white';
        }

        // Auto-hide after 5 seconds
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 5000);
    }

    // Add hover effects to buttons
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            if (!this.disabled) {
                this.style.transform = 'scale(1.05)';
            }
        });

        button.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });
});
</script>
{% endblock %}
